USE test; # use 데이터 베이스 사용
CREATE TABLE address_book(
	`no` INT NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(10) NOT NULL,
	tel VARCHAR(14),
	nickname VARCHAR(20) DEFAULT '별명',
	PRIMARY KEY(`no`)
) AUTO_INCREMENT=10001;

SHOW TABLES;	#주석
CREATE TABLE tmp(
	id INT PRIMARY KEY,
	NAME CHAR(10)
);

DROP TABLE tmp;		 # tmp 테이블삭제
USE world
SELECT * from city WHERE countrycode = 'KOR';  #city에서 countrycode 안에서 kor 찾기
SELECT * from city WHERE district = 'kyonggi';
SELECT district FROM city WHERE district ='kor';
SELECT * FROM city WHERE district like 'chungchong%' or district = 'taejon' #like '~~%' ~~포함된것 찾기
SELECT * FROM city WHERE district like 'chungchong%' or district = 'taejon' ORDER BY NAME ; # 알파벳순서로 정렬(뒤에 desc 붙이면 반대로)
SELECT * FROM city 
	ORDER BY population DESC
	LIMIT 1; #전세계 가장많은 인구
SELECT avg(population) from city
	WHERE countrycode= 'KOR'; # 한국도시의 평균인구 (sum,min,max 모두사용가능)
SELECT min(population), AVG(population), max(population) from city
	WHERE countrycode= 'KOR'; # , 이용가능
SELECT sum(population),AVG(population) from city
	WHERE district= 'gyeonggi' #경기도의 총인구, 평균인구 구하기
SELECT countrycode, SUM(population), COUNT(*) FROM city 
	GROUP BY countrycode
	ORDER BY sum(population) DESC
	LIMIT 10; # 국가별 도시인구의 합 탑10
SELECT countrycode, AVG(population), COUNT(*) FROM city 
	GROUP BY countrycode
	HAVING COUNT(*) >= 10
	ORDER BY avg(population) DESC
	LIMIT 10; #도시가 10개 이상인 국가의 도시인구 평균 탑10
SELECT district, avg(population), COUNT(*) from city
	WHERE countrycode like 'KOR'
	group BY district
	HAVING COUNT(*) >=3
	ORDER BY AVG(population) desc
	LIMIT 5; # 한국의 광역시도 중에서 인구평균 탑5
SELECT district, avg(population) AS average, COUNT(*) AS number from city
	WHERE countrycode like 'KOR'
	group BY district
	HAVING COUNT(*) >=3
	ORDER BY AVG(population) desc
	LIMIT 5; # as 쿼리이름 바꿀이름으로 변경가능(nodejs에서 사용할 수 있게 변경)
SELECT district, round(avg(population)) AS average, COUNT(*) AS 'count' from city
	WHERE countrycode like 'KOR'
	group BY district
	HAVING COUNT(*) >=3
	ORDER BY AVG(population) desc
	LIMIT 5; #round() 를통해 소숫점 제거, 	HAVING COUNT(*) >=3로 COUNT(*)가 3개이상인 것 만 표시
SELECT country.Name , round(avg(city.population)) AS average,
	COUNT(*) AS 'count' from city
	JOIN country ON city.countrycode = country.code
	group BY countrycode
	HAVING COUNT(*) >=10
	ORDER BY AVG(city.population) desc
	LIMIT 5; #?????
INSERT INTO table이름 (field1,field2...)
VALUES (value1, value2, value3, ...);
insert INTO city(`name`, countrycode, district, population)
	VALUES ('hwasung', 'kor', 'kyonggi', 300001),
	('pocheon','kor','kyonggi',100001); #도시 추가하기
UPDATE city
	SET NAME ='Osan', population= 150000
	WHERE id=4080;
SELECT *FROM city
	ORDER BY id desc
	LIMIT 10;
UPDATE city SET district ='Gyeonggi' 
	WHERE district='kyonggi'; #kyunggi -> Gyeonggi로 바꾸기
SELECT *FROM city WHERE district LIKE 'Gyeonggi';
INSERT INTO citycopy(`name`,countrycode, district, population)
	values('hwasung', 'kor', 'kyonggi', 300001),
	('pocheon','kor','kyonggi',100001);
delete from city where id=4082; # id 4082 삭제
create view KoreanCity as 
select id, name, district, population  
from city
where countrycode='kor';  # 한국도시 모아 뷰 만들기
SELECT * FROM koreancity
	where population < (
SELECT AVG(population) from koreancity); #도시 인구 평균보다 높은 도시들


CREATE TABLE DATE_table (
	id INT AUTO_INCREMENT PRIMARY KEY,
	`datetime` DATETIME DEFAULT CURRENT_timestamp
) 	AUTO_INCREMENT=101; #  DEFAULT CURRENT_timestamp 디폴트 현재시간

INSERT INTO date_table(DATETIME)
	VALUES ('2020-01-01'),('2020-10-01 2:3:4');

SELECT DATETIME from date_table
	WHERE id = 101;
SELECT NOW(), CURDATE(), CURTIME();
SELECT now(), curdate(), curtime(); SELECT date_add(now(), interval 2 MONTH); SELECT date_sub(now(), interval 5 DAY)
SELECT TO_DAYS('2020-12-03') - to_days(NOW()); #수능 날짜 구하기 
SELECT dayofweek('2020-10-10');

SELECT  l.NAME, l.debut, r.title, r.lyrics
	FROM girl_group AS l #left
	INNER JOIN song AS r #right
	ON l.hit_song_id = r.sid; #교집합 모으기 
SELECT  *  FROM girl_group
	where debut BETWEEN '2009-01-01' AND '2009-12-31'  # girl_group테이블에서 debut값이 2009년인 것 구하기
SELECT  l.NAME, l.debut, r.title
	FROM girl_group AS l #left
	INNER JOIN song AS r #right
	ON l.hit_song_id = r.sid
	where debut BETWEEN '2009-01-01' AND '2009-12-31'; 2009년에 데뷔한 그룹의 히트송 구하기
SELECT continent, COUNT(*), SUM(gnp) FROM country
	GROUP BY continent; #3번문제 대륙별 국가 숫자, gnp합
SELECT name, AVG(gnp) FROM country
	GROUP BY code #3번문제 평균 국가별 gnp

SELECT r.continent, r.name, l.District, l.population
	FROM city AS l
	INNER join country AS r
	ON l.CountryCode = r.code
	WHERE r.Continent ='asia'
	ORDER BY l.Population desc
	limit 10	#4번문제
SELECT l.District, l.population, r.`Language`
	FROM city AS l
	INNER join countrylanguage AS r
	ON l.CountryCode = r.countrycode
	WHERE r.IsOfficial ='t'
	ORDER BY l.Population desc
	limit 10; #5번문제

CREATE TABLE songcopy LIKE song ;

LOAD DATA INFILE
	'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/song.csv'
	INTO TABLE songcopy
	FIELDS TERMINATED BY ','
	ENCLOSED BY '"'
	LINES TERMINATED BY '\n'

NodeJS에서 사용법
1. connection 설정
2. SQL 처리
3. connection 해제

